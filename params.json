{"name":"Money","body":"# RubyMoney - Money\r\n\r\n[![Build Status](http://travis-ci.org/RubyMoney/money.png)](http://travis-ci.org/RubyMoney/money)\r\n[![Dependency Status](https://gemnasium.com/RubyMoney/money.png)](https://gemnasium.com/RubyMoney/money)\r\n\r\n## Contributing\r\n\r\nWhen contributing, please make sure to update the CHANGELOG and AUTHORS files\r\nwhen you submit your pull request. Upon merging of your first pull request,\r\nyou will be given commit access to the repository.\r\n\r\n## Introduction\r\n\r\nThis library aids one in handling money and different currencies.\r\n\r\n### Features\r\n\r\n- Provides a `Money` class which encapsulates all information about an certain\r\n  amount of money, such as its value and its currency.\r\n- Provides a `Money::Currency` class which encapsulates all information about\r\n  a monetary unit.\r\n- Represents monetary values as integers, in cents. This avoids floating point\r\n  rounding errors.\r\n- Represents currency as `Money::Currency` instances providing an high level of\r\n  flexibility.\r\n- Provides APIs for exchanging money from one currency to another.\r\n- Has the ability to parse a money and currency strings\r\n  into the corresponding Money/Currency object.\r\n\r\n### Resources\r\n\r\n- [Website](http://rubymoney.github.com/money)\r\n- [API Documentation](http://rubydoc.info/gems/money/frames)\r\n- [Git Repository](http://github.com/RubyMoney/money)\r\n\r\n### Note\r\n\r\nYour app must use UTF-8 to function with this library. There are a number of non-ASCII currency attributes.\r\n\r\n## Downloading\r\n\r\nInstall stable releases with the following command:\r\n\r\n    gem install money\r\n\r\nThe development version (hosted on Github) can be installed with:\r\n\r\n    git clone git://github.com/RubyMoney/money.git\r\n    cd money\r\n    rake install\r\n\r\n## Usage\r\n\r\n``` ruby\r\nrequire 'money'\r\n\r\n# 10.00 USD\r\nmoney = Money.new(1000, \"USD\")\r\nmoney.cents     #=> 1000\r\nmoney.currency  #=> Currency.new(\"USD\")\r\n\r\n# Comparisons\r\nMoney.new(1000, \"USD\") == Money.new(1000, \"USD\")   #=> true\r\nMoney.new(1000, \"USD\") == Money.new(100, \"USD\")    #=> false\r\nMoney.new(1000, \"USD\") == Money.new(1000, \"EUR\")   #=> false\r\nMoney.new(1000, \"USD\") != Money.new(1000, \"EUR\")   #=> true\r\n\r\n# Arithmetic\r\nMoney.new(1000, \"USD\") + Money.new(500, \"USD\") == Money.new(1500, \"USD\")\r\nMoney.new(1000, \"USD\") - Money.new(200, \"USD\") == Money.new(800, \"USD\")\r\nMoney.new(1000, \"USD\") / 5                     == Money.new(200, \"USD\")\r\nMoney.new(1000, \"USD\") * 5                     == Money.new(5000, \"USD\")\r\n\r\n# Assumptive Currencies\r\nMoney.assume_from_symbol = true\r\nMoney.new(\"$100\") == Money.new(10000, \"USD\") \r\nMoney.new(\"€100\") == Money.new(10000, \"EUR\") \r\nMoney.new(\"£100\") == Money.new(10000, \"GBP\") \r\n\r\n# Currency conversions\r\nsome_code_to_setup_exchange_rates\r\nMoney.new(1000, \"USD\").exchange_to(\"EUR\") == Money.new(some_value, \"EUR\")\r\n```\r\n\r\n## Currency\r\n\r\nCurrencies are consistently represented as instances of `Money::Currency`.\r\nThe most part of `Money` APIs allows you to supply either a `String` or a\r\n`Money::Currency`.\r\n\r\n``` ruby\r\nMoney.new(1000, \"USD\") == Money.new(1000, Currency.new(\"USD\"))\r\nMoney.new(1000, \"EUR\").currency == Currency.new(\"EUR\")\r\n```\r\n\r\nA `Money::Currency` instance holds all the information about the currency,\r\nincluding the currency symbol, name and much more.\r\n\r\n``` ruby\r\ncurrency = Money.new(1000, \"USD\").currency\r\ncurrency.iso_code #=> \"USD\"\r\ncurrency.name     #=> \"United States Dollar\"\r\n```\r\n\r\nTo define a new `Money::Currency` use `Money::Currency.register` as shown\r\nbelow.\r\n\r\n``` ruby\r\ncurr = {\r\n  :priority        => 1,\r\n  :iso_code        => \"USD\",\r\n  :iso_numeric     => \"840\",\r\n  :name            => \"United States Dollar\",\r\n  :symbol          => \"$\",\r\n  :subunit         => \"Cent\"\r\n  :subunit_to_unit => 100,\r\n  :separator       => \".\",\r\n  :delimiter       => \",\"\r\n}\r\n\r\nMoney::Currency.register(curr)\r\n```\r\n\r\nThe pre-defined set of attributes includes:\r\n\r\n- `:priority` a numerical value you can use to sort/group the currency list\r\n- `:iso_code` the international 3-letter code as defined by the ISO 4217 standard\r\n- `:iso_numeric` the international 3-digit code as defined by the ISO 4217 standard\r\n- `:name` the currency name\r\n- `:symbol` the currency symbol (UTF-8 encoded)\r\n- `:subunit` the name of the fractional monetary unit\r\n- `:subunit_to_unit` the proportion between the unit and the subunit\r\n- `:separator` character between the whole and fraction amounts\r\n- `:delimiter` character between each thousands place\r\n\r\nAll attributes are optional. Some attributes, such as `:symbol`, are used by\r\nthe Money class to print out a representation of the object. Other attributes,\r\nsuch as `:name` or `:priority`, exist to provide a basic API you can take\r\nadvantage of to build your application.\r\n\r\n### :priority\r\n\r\nThe priority attribute is an arbitrary numerical value you can assign to the\r\n`Money::Currency` and use in sorting/grouping operation.\r\n\r\nFor instance, let's assume your Rails application needs to render a currency\r\nselector like the one available\r\n[here](http://finance.yahoo.com/currency-converter/). You can create a couple of\r\ncustom methods to return the list of major currencies and all currencies as\r\nfollows:\r\n\r\n``` ruby\r\n# Returns an array of currency id where\r\n# priority < 10\r\ndef major_currencies(hash)\r\n  hash.inject([]) do |array, (id, attributes)|\r\n    priority = attributes[:priority]\r\n    if priority && priority < 10\r\n      array[priority] ||= []\r\n      array[priority] << id\r\n    end\r\n    array\r\n  end.compact.flatten\r\nend\r\n\r\n# Returns an array of all currency id\r\ndef all_currencies(hash)\r\n  hash.keys\r\nend\r\n\r\nmajor_currencies(Money::Currency.table)\r\n# => [ :usd, :eur, :bgp, :cad ]\r\n\r\nall_currencies(Money::Currency.table)\r\n# => [ :aed, :afn, all, ... ]\r\n```\r\n\r\n### Default Currency\r\n\r\nBy default `Money` defaults to USD as its currency. This can be overwritten\r\nusing:\r\n\r\n``` ruby\r\nMoney.default_currency = Money::Currency.new(\"CAD\")\r\n```\r\n\r\nIf you use Rails, then `environment.rb` is a very good place to put this.\r\n\r\n## Currency Exchange\r\n\r\nExchanging money is performed through an exchange bank object. The default\r\nexchange bank object requires one to manually specify the exchange rate. Here's\r\nan example of how it works:\r\n\r\n``` ruby\r\nMoney.add_rate(\"USD\", \"CAD\", 1.24515)\r\nMoney.add_rate(\"CAD\", \"USD\", 0.803115)\r\n\r\nMoney.us_dollar(100).exchange_to(\"CAD\")  # => Money.new(124, \"CAD\")\r\nMoney.ca_dollar(100).exchange_to(\"USD\")  # => Money.new(80, \"USD\")\r\n```\r\n\r\nComparison and arithmetic operations work as expected:\r\n\r\n``` ruby\r\nMoney.new(1000, \"USD\") <=> Money.new(900, \"USD\")   # => 1; 9.00 USD is smaller\r\nMoney.new(1000, \"EUR\") + Money.new(10, \"EUR\") == Money.new(1010, \"EUR\")\r\n\r\nMoney.add_rate(\"USD\", \"EUR\", 0.5)\r\nMoney.new(1000, \"EUR\") + Money.new(1000, \"USD\") == Money.new(1500, \"EUR\")\r\n```\r\n\r\nThere is nothing stopping you from creating bank objects which scrapes\r\n[XE](http://www.xe.com) for the current rates or just returns `rand(2)`:\r\n\r\n``` ruby\r\nMoney.default_bank = ExchangeBankWhichScrapesXeDotCom.new\r\n```\r\n\r\n### Implementations\r\n\r\nThe following is a list of Money.gem compatible currency exchange rate\r\nimplementations.\r\n\r\n- [eu_central_bank](http://github.com/RubyMoney/eu_central_bank)\r\n- [google_currency](http://github.com/RubyMoney/google_currency)\r\n- [nordea](https://github.com/k33l0r/nordea)\r\n- [nbrb_currency](https://github.com/slbug/nbrb_currency)\r\n- [money-open-exchange-rates](https://github.com/spk/money-open-exchange-rates)\r\n- [money-historical-bank](https://github.com/coutud/money-historical-bank)\r\n\r\n## Ruby on Rails\r\n\r\nTo integrate money in a rails application use [money-rails](http://github.com/RubyMoney/money-rails)\r\ngem or follow the instructions below.\r\n\r\nUse the `composed_of` helper to let Active Record deal with embedding the money\r\nobject in your models. The following example requires 2 columns:\r\n\r\n``` ruby\r\n:price_cents, :integer, :default => 0, :null => false\r\n:currency, :string\r\n```\r\n\r\nThen in your model file:\r\n\r\n``` ruby\r\ncomposed_of :price,\r\n  :class_name => \"Money\",\r\n  :mapping => [%w(price_cents cents), %w(currency currency_as_string)],\r\n  :constructor => Proc.new { |cents, currency| Money.new(cents || 0, currency || Money.default_currency) },\r\n  :converter => Proc.new { |value| value.respond_to?(:to_money) ? value.to_money : raise(ArgumentError, \"Can't convert #{value.class} to Money\") }\r\n```\r\n\r\nFor Money 2.2.x and previous versions, simply use the following `composed_of`\r\ndefinition:\r\n\r\n``` ruby\r\ncomposed_of :price,\r\n  :class_name => \"Money\",\r\n  :mapping => [%w(price_cents cents), %w(currency currency)],\r\n  :constructor => Proc.new { |cents, currency| Money.new(cents || 0, currency || Money.default_currency) }\r\n```\r\n\r\nNote the difference in the currency column mapping (currency_as_string vs. currency) - this matters!  For further details read the full discussion\r\n[here](http://github.com/RubyMoney/money/issues/4#comment_224880).","tagline":"Library for dealing with money and currency conversion","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}